
---------------- ---------------- ---------------- ---------------- ---------------- 

Your solution needs to receive messages without having to poll the queue. With Service Bus, you can achieve it by using a long-polling receive operation using the TCP-based protocols that Service Bus supports.
Your solution requires the queue to provide a guaranteed first-in-first-out (FIFO) ordered delivery.
Your solution needs to support automatic duplicate detection.
You want your application to process messages as parallel long-running streams (messages are associated with a stream using the session ID property on the message). In this model, each node in the consuming application competes for streams, as opposed to messages. When a stream is given to a consuming node, the node can examine the state of the application stream state using transactions.
Your solution requires transactional behavior and atomicity when sending or receiving multiple messages from a queue.
Your application handles messages that can exceed 64 KB but won't likely approach the 256 KB or 1-MB limit, depending on the chosen service tier (although Service Bus queues can handle messages up to 100 MB).
You deal with a requirement to provide a role-based access model to the queues, and different rights/permissions for senders and receivers.

Implement:
- message queues 
- publish-subscribe topics.

Define:
- Message is a container decorated with metadata, and contains data.
- The data can be any kind of information. - JSON, XML, Apache Avro, and Plain Text.
- Can it be a image srting representation to be sent to nvidia ocr?

Common Scenarios:
- Transfer business data.
	Such as sales or purchase orders, journals, or inventory movements.
- Decouple applications.
	Improve reliability and scalability of applications and services. Client and service don't have to be online at the same time.
- Topics and subscriptions. 
	Enable 1:n relationships between publishers and subscribers.
- Message sessions. 
	Implement workflows that require message ordering or message deferral.

Advanced features:
- Message sessions.
	To create a first-in, first-out (FIFO) guarantee in Service Bus, use sessions. 
	Message sessions enable exclusive, ordered handling of unbounded sequences of related messages.
- Autoforwarding.
	The autoforwarding feature chains a queue or subscription to another queue or topic that is in the same namespace.
- Dead-letter queue.
	Service Bus supports a dead-letter queue (DLQ). A DLQ holds messages that can't be delivered to any receiver. 
	Service Bus lets you remove messages from the DLQ and inspect them.
- Scheduled delivery. 
	You can submit messages to a queue or topic for delayed processing. 
	You can schedule a job to become available for processing by a system at a certain time.
- Message deferral.	
	A queue or subscription client can defer retrieval of a message until a later time. 
	The message remains in the queue or subscription, but is set aside.
- Transactions.	
	A transaction groups two or more operations together into an execution scope. 
	Service Bus supports grouping operations against a single messaging entity within the scope of a single transaction. 
	A message entity can be a queue, topic, or subscription.
- Filtering and actions.	
	Subscribers can define which messages they want to receive from a topic. 
	These messages are specified in the form of one or more named subscription rules.
- Autodelete on idle.
	Autodelete on idle enables you to specify an idle interval after which a queue is automatically deleted. 
	The minimum duration is 5 minutes.
- Duplicate detection.
	An error could cause the client to have a doubt about the outcome of a send operation. 
	Duplicate detection enables the sender to resend the same message, or for the queue or topic to discard any duplicate copies.
- Security protocols.
	Service Bus supports security protocols such as 
		Shared Access Signatures (SAS).
		Role Based Access Control (RBAC).
		Managed identities for Azure resources.
- Geo-disaster recovery.	
	When Azure regions or datacenters experience downtime, Geo-disaster recovery enables data processing to continue operating in a different region or datacenter.
- Security.
	Service Bus supports standard AMQP 1.0 and HTTP/REST protocols.

Compliance with standards and protocols: 
	The primary wire protocol for Service Bus is Advanced Messaging Queueing Protocol (AMQP) 1.0

---------------- ---------------- ---------------- ---------------- ---------------- 

Messaging entities:
	Queues
		Queues offer First In, First Out (FIFO) message delivery to one or more competing consumers.
	Topics and Subscriptions
	Rules/Actions

Patterns:
	Competing consumer
	Temporal decoupling
	Load leveling
	Load balancing

Rules and Actions:
	You can only copy a subset of those messages to the virtual subscription queue. This filtering is accomplished using subscription filters. Such modifications are called filter actions.

---------------- ---------------- ---------------- ---------------- ---------------- 





